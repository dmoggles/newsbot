from typing import List, Optional
from datetime import datetime

class Config:
    @property
    def browser_user_agent(self) -> str: ...
    @browser_user_agent.setter
    def browser_user_agent(self, value: str) -> None: ...
    @property
    def request_timeout(self) -> int: ...
    @request_timeout.setter
    def request_timeout(self, value: int) -> None: ...
    @property
    def number_threads(self) -> int: ...
    @number_threads.setter
    def number_threads(self, value: int) -> None: ...
    @property
    def verbose(self) -> bool: ...
    @verbose.setter
    def verbose(self, value: bool) -> None: ...
    @property
    def fetch_images(self) -> bool: ...
    @fetch_images.setter
    def fetch_images(self, value: bool) -> None: ...
    @property
    def memoize_articles(self) -> bool: ...
    @memoize_articles.setter
    def memoize_articles(self, value: bool) -> None: ...
    @property
    def use_meta_language(self) -> bool: ...
    @use_meta_language.setter
    def use_meta_language(self, value: bool) -> None: ...

class Article:
    def __init__(self, url: str, config: Optional[Config] = None) -> None: ...
    def set_html(self, html: str) -> None: ...
    def parse(self) -> None: ...
    def download(self) -> None: ...
    @property
    def title(self) -> str: ...
    @property
    def text(self) -> str: ...
    @property
    def authors(self) -> List[str]: ...
    @property
    def publish_date(self) -> datetime: ...
    @property
    def top_image(self) -> str: ...
    @property
    def meta_description(self) -> str: ...
    @property
    def meta_keywords(self) -> List[str]: ...
    @property
    def clean_doc(self) -> Optional[str]: ...
